pipe:
    int pfd[2];
    pipe(pfd);
    write(pfd[1], "hello"<buf>, <size>);
    read(pfd[0], buf, <size>);

    Procesos: 
        comunicacion padre a hijo:
            hijo:close(pfd[1]);
            padre:close(pfd[0]);
        comucion hijo a padre:
            padre:close(pfd[1]);
            hijo:close(pfd[0]);

Procesos:
	1) Llamada a fork():
    * fork() crea un nuevo proceso duplicando el proceso que lo llama.
    * El proceso que llama a fork() se convierte en el proceso padre.
    * El nuevo proceso creado se llama proceso hijo.
    2) Valor de Retorno de fork():
    * En el proceso padre, fork() devuelve el PID del proceso hijo.
    * En el proceso hijo, fork() devuelve 0.
    3) Condicional if ((pids[i] = fork()) == 0):
    * Esta condición verifica si el valor de retorno de fork() es 0.
    * ==> Si es 0, significa que el código está siendo ejecutado por el proceso hijo.
    * ==> Si no es 0, significa que el código está siendo ejecutado por el proceso padre.
    4) Separación del Código:
    * El código dentro del bloque if ((pids[i] = fork()) == 0) es ejecutado solo por los procesos hijos.
    * El código fuera del bloque if (después del bucle for) es ejecutado solo por el proceso padre.